System Calls
System calls provide an interface to the services of operating system.
These calls are routines written in C and C++, or assembly-language instructions.
Example to illustrate how system calls are used:
Writing a simple program to read data from one file and copy them to another file.

This sequence requires many I/O system calls. Even simple programs may make heavy use of the operating system. Frequently, systems execute thousands of system calls per second. Most programmers never see this level of detail, however. Typically, application developers design programs according to an application programming interface (API). The API specifies a set of functions that are available to an application programmer, including the parameters that are passed to each function and the return values the programmer can expect. A programmer accesses an API via a library of code provided by the operating system.
API typically invoke the actual system calls on behalf of the application programmer. For example, the Windows function CreateProcess() (which unsurprisingly is used to create a new process) actually invokes the NTCreateProcess() system call in the Windows kernel.
Why would an application programmer prefer programming according to an API rather than invoking actual system calls?
There are several reasons for doing so.
1. Program portability. (Can execute in any system which support that API)
2. System calls can often be more detailed and difficult to work with than the API.
 
There exists a strong correlation between a function in the API and its associated system call within the kernel. This corelation is provided by system call interface. The system-call interface intercepts function calls in the API and invokes the necessary system calls within the operating system.
 
A number is associated with each system call, and the system-call interface maintains a table indexed with these numbers. The system call interface then invokes the intended system call in the operating-system kernel and returns the status of the system call and any return values.
 
The caller need know nothing about how the system call is implemented or what it does during execution. Rather, the caller need only obey the API and understand what the operating system will do as a result of the execution of that system call. Thus, most of the details of the operating-system interface are hidden from the programmer by the API and are managed by the run-time support library. The relationship between an API, the system-call interface, and the operating system is shown in Figure 2.6, which illustrates how the operating system handles a user application invoking the open() system call.
 
The handling of a user application invoking the open() system call
Types of System Calls
System calls can be grouped roughly into six major categories:
1. process control
2. file manipulation
3. device manipulation
4. information maintenance
5. communications
6. protection.
